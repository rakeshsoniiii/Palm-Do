import mongoose from 'mongoose';
import bcrypt from 'bcryptjs';

const userSchema = new mongoose.Schema({
  name: { 
    type: String, 
    required: true, 
    trim: true, 
    maxlength: 100 
  },
  phone: { 
    type: String, 
    required: true, 
    unique: true, 
    match: /^[0-9]{10}$/ 
  },
  pin: { 
    type: String, 
    required: true,
    select: false 
  },
  balance: { 
    type: Number, 
    default: 1000, 
    min: 0 
  },
  upiId: { 
    type: String, 
    unique: true 
  },
  isActive: { 
    type: Boolean, 
    default: true 
  },
  lastLogin: Date,
  createdAt: { 
    type: Date, 
    default: Date.now 
  }
}, {
  toJSON: {
    transform: function(doc, ret) {
      delete ret.pin;
      delete ret.__v;
    }
  }
});

userSchema.pre('save', async function(next) {
  if (!this.upiId) {
    this.upiId = `${this.phone}@payeasy`;
  }

  if (this.isModified('pin')) {
    this.pin = await bcrypt.hash(this.pin, 10);
  }
  next();
});

userSchema.methods.comparePin = async function(candidatePin) {
  return await bcrypt.compare(candidatePin, this.pin);
};

export default mongoose.model('User', userSchema);
